input{}
output{}
fun random_sample(): float {
  float u;
  u = rand();
  if (u<0.5) {
    return sqrt(-0.5*3.141593*log(1-(2*u-1)^2));
  } else {
    return -sqrt(-0.5*3.141593*log(1-(1-2*u)^2));
  }
}

/* Return a random number drawn from a Gamma distribution with mean alpha*beta+lamba and variance alpha*beta^2. */
fun gamma_sample(float alpha, float beta, float lambda): float {
  float gamma;
  gamma=0.0;
  if (alpha <= 0.0 or beta <= 0.0) {
     print('alpha and beta must be positive.');
     return -1.0;
  }
  if (alpha < 1.0) {
    float b;
    float p;
    int flag;
    flag=0;
    b=1+alpha*0.3678794;
    while (flag == 0) {
      p=b*rand();
      if (p>1.0) {
        gamma=-log((b-p)/alpha);
        if (rand()<=gamma^(alpha-1.0)) {
          flag=1;
        }
      }
      else {
        gamma=p^(1.0/alpha);
        if (rand()<=2.718282^(-gamma)) { 
          flag=1;
        }
      }
    }
  } else {
    if (alpha == 1.0) {
      gamma = -log(rand());
    } else {
      float y;
      y = -log(rand());
      while (rand() > (y * (1.0 - y))^(alpha - 1.0)) {
        y = -log(rand());
      }
      gamma = alpha * y;
    }
  }
  return beta*gamma+lambda;
}

/* sample from p(x,y)=kx^2*exp(-xy^2-y^2+2y-4x) */
fun~ bivar(): x, y {
  x = gamma_sample(3.0,y*y+4.0,0.0);
  y = random_sample(1.0/(x+1),1.0/sqrt(2*x+2));
}

model
{
  srand(1234);
  x, y ~ bivar();
  print(x);
  print(y);
}
